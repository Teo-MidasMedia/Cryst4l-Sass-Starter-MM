/*------------------------------------*\
    $RWSMITH GRID
\*------------------------------------*/
/**
 * CONTENTS
 * INTRO................How the system works with examples
 * VARS.................Default settings, change as necessary
 * FEATURE-TOGGLE.......Toggle specific grid features
 * MIXINS...............Used for generating width, push & pull classes.
 * GRID-INITIALISE......Build the grid architecture
 * WIDTHS...............Width classes
 * PUSH.................Push classes
 * PULL.................Pull classes
 */





/*------------------------------------*\
    $INRO
\*------------------------------------*/
/**
 * This grid system is designed to be as minimal as possible, using only width,
 * push and pull classes that you actually intend to use via the feature-toggle 
 * section below.
 * The grid settings are located in the $VARS section below.
 *
 * NOTE: This grid system uses responsive suffixes on top of the modified 
 * version of the BEM naming convention.
 * Further reading on BEM
 * http://bit.ly/1dM4LGz
 *
 * Responsive suffixes:
 * http://bit.ly/1kT29fI
 *
 * 
 * You can initialise a grid with the class of `o-grid`
 *
    <div class="o-grid">
 *
 * This grid system can accept a number of modifier flags which can be activated
 * or deactivated via the feature toggle.  
 * Example:
 *
    <div class="o-grid o-grid--no-gutter">
 *
 * Within the grid you can nest grid items.
 *
    <div class="o-grid">
        <div class="o-grid__item">
 *
 * These items can than be manipulated with width, push or pull classes.
 * 
  <div class="o-grid__item u-1/2">
 *
 * Using responsive suffixes widths, push and pull can be applied for specific
 * breakpoints.
  `class="o-grid__item u-1/2@sm-up u-1/3@md-up"`
 *
 * Push and pull classes can be used to shift the grid item's positioning along
 * the X axis.  They can also be used with responsive suffixes and combined
 * with width classes, which gives an enormous variety of possible combinations.
 * Example:
 *
  `class="o-grid__item u-2/3@sm-up u-push-1/3@md-up"`
 *
 * This grid system is infinitely nestable.
 *
 * DEMO
 * http://codepen.io/rbrtsmith/full/VvdGMp/
 */






/*------------------------------------*\
    $VARS
\*------------------------------------*/

/**
 * Amount of space between grid items
 */
$grid-gutter-width: 1rem !default;

/**
 * Large and small gutters, must be toggled to false under `FEATURE-TOGGLE`.
 * Can be activated on a grid with the modifier flag
 *
  <div class="o-grid o-grid--gutter-sm">
 */
$gutter-lg-width: $grid-gutter-width * 2 !default;
$gutter-sm-width: $grid-gutter-width / 2 !default;

/**
 * In order to remove unwanted whitespace between grid items due to inline-blocks 
 * the font-size of the grid is set to zero, then on the grid items themselves
 * the font-size will be given the value below - which should be equal to your
 * projects default font size.
 * Any headlines that are descendants of the `o-grid__item` will inherit their 
 * respective set font-sizes.
 */
$grid-font-size: 1rem !default;

/**
 * Media query breakpoints.
 * You can choose how many, the namespace and breakpoint value.
 * Example width class with default values: Note the `@`symbol prepends
 * the namespace.
 *
 `u-1/2@sm-up u-2/5@lg-up`
 *
 * 1. Namespace for the breakpoint.
 * 2. Value for the breakpoint.
 * You can comment out or remove breakpoints from the list to reduce
 * bloat from the stylesheet, or add additional breakpoints.
 *
 */
$grid-breakpoints: (
    /* [1]       [2] */
    ( xt-up,    320px ),
    ( xs-up,    480px ),
    ( sl-up,    640px ),
    ( sm-up,    768px ),
    ( md-up,    980px ),
    ( lg-up,    1200px ),
) !default;




/*------------------------------------*\
    $FEATURE-TOGGLE
\*------------------------------------*/
/**
 * Set values to true to have Sass compile it into your resulting stylesheet.
 * Set features that you are not using to keep bloat down to a minimum!
 */
$use-grid:               true !default;

/** GRID FLAGS */
$use-grid--equal-height: true !default;
$use-grid--center:       true !default;
$use-grid--bottom:       true !default;

$use-grid--gutter-lg:    true !default;
$use-grid--gutter-sm:    true !default;
$use-grid--no-gutter:    true !default;
$use-grid--matrix:       true !default;

$use-grid--reverse:      true !default;


/** WIDTHS */
$use-width-1-1:   true !default;
$use-width-1-2:   true !default;
$use-width-1-3:   true !default;
$use-width-2-3:   true !default;
$use-width-1-4:   true !default;
$use-width-2-4:   true !default;
$use-width-3-4:   true !default;
$use-width-1-5:   true !default;
$use-width-2-5:   true !default;
$use-width-3-5:   true !default;
$use-width-4-5:   true !default;
$use-width-1-6:   true !default;
$use-width-2-6:   true !default;
$use-width-3-6:   true !default;
$use-width-4-6:   true !default;
$use-width-5-6:   true !default;
$use-width-1-8:   true !default;
$use-width-2-8:   true !default;
$use-width-3-8:   true !default;
$use-width-4-8:   true !default;
$use-width-5-8:   true !default;
$use-width-6-8:   true !default;
$use-width-7-8:   true !default;
$use-width-1-10:  true !default;
$use-width-2-10:  true !default;
$use-width-3-10:  true !default;
$use-width-4-10:  true !default;
$use-width-5-10:  true !default;
$use-width-6-10:  true !default;
$use-width-7-10:  true !default;
$use-width-8-10:  true !default;
$use-width-9-10:  true !default;
$use-width-1-12:  true !default;
$use-width-2-12:  true !default;
$use-width-3-12:  true !default;
$use-width-4-12:  true !default;
$use-width-5-12:  true !default;
$use-width-6-12:  true !default;
$use-width-7-12:  true !default;
$use-width-8-12:  true !default;
$use-width-9-12:  true !default;
$use-width-10-12: true !default;
$use-width-11-12: true !default;

/** Push */
$use-push-1-1:    true !default;
$use-push-1-2:    true !default;
$use-push-1-3:    true !default;
$use-push-2-3:    true !default;
$use-push-1-4:    true !default;
$use-push-2-4:    true !default;
$use-push-3-4:    true !default;
$use-push-1-5:    true !default;
$use-push-2-5:    true !default;
$use-push-3-5:    true !default;
$use-push-4-5:    true !default;
$use-push-1-6:    true !default;
$use-push-2-6:    true !default;
$use-push-3-6:    true !default;
$use-push-4-6:    true !default;
$use-push-5-6:    true !default;
$use-push-1-8:    true !default;
$use-push-2-8:    true !default;
$use-push-3-8:    true !default;
$use-push-4-8:    true !default;
$use-push-5-8:    true !default;
$use-push-6-8:    true !default;
$use-push-7-8:    true !default;
$use-push-1-10:   true !default;
$use-push-2-10:   true !default;
$use-push-3-10:   true !default;
$use-push-4-10:   true !default;
$use-push-5-10:   true !default;
$use-push-6-10:   true !default;
$use-push-7-10:   true !default;
$use-push-8-10:   true !default;
$use-push-9-10:   true !default;
$use-push-1-12:   true !default;
$use-push-2-12:   true !default;
$use-push-3-12:   true !default;
$use-push-4-12:   true !default;
$use-push-5-12:   true !default;
$use-push-6-12:   true !default;
$use-push-7-12:   true !default;
$use-push-8-12:   true !default;
$use-push-9-12:   true !default;
$use-push-10-12:  true !default;
$use-push-11-12:  true !default;

/** Pull */
$use-pull-1-1:    true !default;
$use-pull-1-2:    true !default;
$use-pull-1-3:    true !default;
$use-pull-2-3:    true !default;
$use-pull-1-4:    true !default;
$use-pull-2-4:    true !default;
$use-pull-3-4:    true !default;
$use-pull-1-5:    true !default;
$use-pull-2-5:    true !default;
$use-pull-3-5:    true !default;
$use-pull-4-5:    true !default;
$use-pull-1-6:    true !default;
$use-pull-2-6:    true !default;
$use-pull-3-6:    true !default;
$use-pull-4-6:    true !default;
$use-pull-5-6:    true !default;
$use-pull-1-8:    true !default;
$use-pull-2-8:    true !default;
$use-pull-3-8:    true !default;
$use-pull-4-8:    true !default;
$use-pull-5-8:    true !default;
$use-pull-6-8:    true !default;
$use-pull-7-8:    true !default;
$use-pull-1-10:   true !default;
$use-pull-2-10:   true !default;
$use-pull-3-10:   true !default;
$use-pull-4-10:   true !default;
$use-pull-5-10:   true !default;
$use-pull-6-10:   true !default;
$use-pull-7-10:   true !default;
$use-pull-8-10:   true !default;
$use-pull-9-10:   true !default;
$use-pull-1-12:   true !default;
$use-pull-2-12:   true !default;
$use-pull-3-12:   true !default;
$use-pull-4-12:   true !default;
$use-pull-5-12:   true !default;
$use-pull-6-12:   true !default;
$use-pull-7-12:   true !default;
$use-pull-8-12:   true !default;
$use-pull-9-12:   true !default;
$use-pull-10-12:  true !default;
$use-pull-11-12:  true !default;




/**
 * NOTICE..............
 *
 * You should refrain from modifying anything beyond this point,
 * Doing so will likely break the grid system.
 *
 */




/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * 1. Takes 3 arguments:
 *    - The property (Width OR push OR pull),
 *    - The fractions list that corresponds to the property,
 *    - The breakpoint (can be an item in the `$breakpoints` list or null).
 * 2. Loop through all of the fractions
 * 3. If the property within the current fraction has been set feature-toggled
 * 4. If a breakpoint was passed into the mixin...
 * 5. Generate a class name based on:
 *    - The namespace in the current fraction +
 *    - An escaped @ symbol as a responsive suffix +
 *    - The namespace from the current breakpoint item.
 * 6. Generate the property and the value, which is the fraction e.g. 1/3 
 *    converted into a percentage.
 * 7. A breakpoint was not passed into the mixin...
 * 8. Generate the same as above but without any responsive suffixes.
 */
@mixin set-fractions($property, $fractions, $breakpoint) { /* [1] */    
    @each $fraction in $fractions { /* [2] */
        @if nth($fraction, 3) { /* [3] */
            @if $breakpoint { /* [4] */
                .#{nth($fraction, 1)}\@#{nth($breakpoint, 1)} { /* [5] */
                    #{$property}: nth($fraction, 2) * 100%; /* [6] */
                }
            } @else { /* [7] */
                .#{nth($fraction, 1)} { /* [8] */
                    #{$property}: nth($fraction, 2) * 100%;
                }
            }
        }
    }
}

/**
 * 1. Takes 2 arguments: 
 *    - The fractions list that corresponds to the property (Width/Push/pull),
 *    - An optional namespace that will form a segment of the eventual class name.
 * 2. Call the `set-fractions mixin` passing in:
 *    - The property,
 *    - The fractions list,
 * 3. Check if any breakpoints are defined.
 * 4. Loop through the breakpoints.
 * 5. Generate a mobile first media query taking with width value from the
 *    current breakpoint's list (2nd value) and add `1` to the value.
 * 2. Call the `set-fractions mixin` passing in:
 *    - The property,
 *    - The fractions list,
 *    - the current breakpoint
 */
@mixin make-offsets($property, $fractions) { /* [1] */
    @include set-fractions($property, $fractions, null); /* [2] */
    @if $grid-breakpoints { /* [3] */
        @each $breakpoint in $grid-breakpoints { /* [4] */
            @media (min-width: (nth($breakpoint, 2) +1)) { /* [5] */
                /* [6] */
                @include set-fractions($property, $fractions, $breakpoint);
            }
        }
    }
}





@if $use-grid {

/*------------------------------------*\
    $GRID-INITIALISE
\*------------------------------------*/
/**
 * 1. Ensure grid spans full width of parent.
 * 2. Reset any margins and paddings.
 * 3. Set a negative margin-left & right to create space for 
 *    `o-grid__item`s gutter.
 * 4. Set a zero font-size to remove spacing on the `o-grid__item` children
 *    caused by them having their display set to `inline-block`.
 * 5. Remove any possible list styling.
 */
.o-grid {
    min-width: 100%; /* [1] */
    margin: 0; /* [2] */
    padding: 0; /* [2] */
    margin-left: -$grid-gutter-width; /* [3] */
    font-size: 0; /* [4] */
    list-style: none; /* [5] */
}

/**
 * Large gutters
 */
@if $use-grid--gutter-lg {
    .o-grid--gutter-lg {
        margin-left: -$gutter-lg-width;            
    }

    .o-grid--gutter-lg > .o-grid__item {
        padding-left: $gutter-lg-width;
    }
}
    
/**
 * Small gutters
 */
@if $use-grid--gutter-sm {
    .o-grid--gutter-sm {
        margin-left: -$gutter-sm-width;            
    }

    .o-grid--gutter-sm > .o-grid__item {
        padding-left: $gutter-sm-width;
    }
}

/**
 * Zero width gutters
 */
@if $use-grid--no-gutter {
    .o-grid--no-gutter {
        margin-left: 0;            
    }

    .o-grid--no-gutter > .o-grid__item {
        padding-left: 0;
    }
}

/**
 * 1. Give grid items equal heights using flexbox.  
 *    Works for IE10+  IE9 will fallback to the default grid.
 * 2. Fix for IE10 which requires children of flexbox-items to have a
 *    maximum width of 100%.
 */
@if $use-grid--equal-height { /* 1 */
    .o-grid--equal-height,
    .o-grid--equal-height > .o-grid__item,
    .o-grid--equal-height--centered-content > .o-grid__item > * {
        display: -webkit-box;
        display: -webkit-flex;
        display: flex;
        display: -ms-flexbox;
        
        > * { /** [2] */
            width: 100%;
        }
    }
    /**
     * Allow equal height items to wrap, just as standard grid items do, when
     * a combined width of the grid-items is > 100%.
     */
    .o-grid--equal-height {
        -webkit-flex-wrap: wrap;
                flex-wrap: wrap;
            -ms-flex-wrap: wrap;
    }
    /**
     * Vertically center any content nested inside of equal-height grid items.
     */
    .o-grid--equal-height--centered-content > .o-grid__item > * {
              -webkit-box-align: center;
            -webkit-align-items: center;
                 -ms-flex-align: center;
                    align-items: center;
               -webkit-box-pack: center;
        -webkit-justify-content: center;
                justify-content: center;
                  -ms-flex-pack: center;
    }
}

/**
 * Vertically align grid-items to the center
 */
@if $use-grid--center {
    .o-grid--center > .o-grid__item {
        vertical-align: middle;
    }
}

/**
 * Vertically align grid-items to the bottom
 */
@if $use-grid--bottom {
    .o-grid--bottom > .o-grid__item {
        vertical-align: bottom;
    }
}

/**
 * Reverse grid items on the horizontal axis.
 */
@if $use-grid--reverse {
    .o-grid--reverse {
        direction: rtl;
        text-align:left;

        > .o-grid__item {
            direction: ltr;
            text-align: left;
        }
    }
}

/**
 * Give grid items a vertical gutter that is equal to
 * whatever horizontal gutter is applied to the grid.
 */
@if $use-grid--matrix {
    .o-grid--matrix {
        margin-bottom: -$grid-gutter-width;
    }

    .o-grid--matrix > .o-grid__item {
        margin-bottom: $grid-gutter-width;
    }

    /** Increase vertical gutter for large horizontal gutters */
    @if $use-grid--gutter-lg {
        .o-grid--gutter-lg {
            margin-bottom: -$gutter-lg-width;
        }

        .o-grid--gutter-lg > .o-grid__item {
            margin-bottom: $gutter-lg-width;
        }
    }

    /** Decrease vertical gutter for small horizontal gutters */
    @if $use-grid--gutter-sm {
        .o-grid--gutter-sm {
            margin-bottom: -$gutter-sm-width;
        }

        .o-grid--gutter-sm > .o-grid__item {
            margin-bottom: $gutter-sm-width;
        }
    }

    /** Remove vertical gutter for zero horizontal gutters */
    @if $use-grid--no-gutter {
        .o-grid--no-gutter {
            margin-bottom: 0;
        }

        .o-grid--no-gutter > .o-grid__item {
            margin-bottom: 0;
        }
    }
}



/**
 * 1. Set display to relative to allow the push/pull classes to work
 *    which are using left/right positioning values.
 * 2. Necessary to combine fliud width grid-items with fixed width gutters. 
 * 3. Set display to inline-block.  Rather than floating block elements that
 *    you see on many other grid systems, inline-blocks have a number of
 *    benefits such as: 
 *    - No clearfixing issues.
 *    - Rows will tile nicely even if grid items are all different heights.  
 *    - You can vertically align grid items that are different heights.
 *    - You can horizontally align grid items, when total width is <100%
 *      using text-align on the parent 'grid' component.
 *    - You can reverse the order of the grid items by using `grid--reverse`
 *       which changes the direction property from right to left.
 * 4. Set default width of 100%.
 * 5. Prevent item from collapsing when empty.
 * 6. Create the gutter.
 * 7. When grid items are differing heights, align them to the top.
 * 8. Prevent grid-items from inhering text-align properties set
 *    One parent or ancestor nodes.
 * 9. Inject the base font-size.  The grid items cannot inherit font-size
 *    As the font-size on the parent `o-grid` component is set to zero to
 *    overcome whitespace issues when using inline-block.
 */
.o-grid__item {
    position: relative; /* [1] */
    -webkit-box-sizing: border-box;  /* [2] */
       -moz-box-sizing: border-box;  /* [2] */
            box-sizing: border-box;  /* [2] */
    display: inline-block; /* [3] */
    width: 100%; /* [4] */
    min-height: 1px; /* [5] */
    padding-left: $grid-gutter-width; /* [6] */
    vertical-align: top; /* [7] */
    text-align: left; /* |8] */
    font-size: $grid-font-size; /* [9] */
}

} /** Close @if `$use-grid` /*





/*------------------------------------*\
    $WIDTHS
\*------------------------------------*/
/**
 * 1. The namespace. `/` char has to be escaped to be valid CSS.
 * 2. The fraction used to calculate the % width.
 * 3. The Sass variable, if true this class will compile into your CSS.
 */
$width-fractions: (
/*  [1]         [2]       [3] */
    (u-1\/1,      1,        $use-width-1-1),
    (u-1\/2,      1/2,      $use-width-1-2),
    (u-1\/3,      1/3,      $use-width-1-3),
    (u-2\/3,      2/3,      $use-width-2-3),
    (u-1\/4,      1/4,      $use-width-1-4),
    (u-2\/4,      2/4,      $use-width-2-4),
    (u-3\/4,      3/4,      $use-width-3-4),
    (u-1\/5,      1/5,      $use-width-1-5),
    (u-2\/5,      2/5,      $use-width-2-5),
    (u-3\/5,      3/5,      $use-width-3-5),
    (u-4\/5,      4/5,      $use-width-4-5),
    (u-1\/6,      1/6,      $use-width-1-6),
    (u-2\/6,      2/6,      $use-width-2-6),
    (u-3\/6,      3/6,      $use-width-3-6),
    (u-4\/6,      4/6,      $use-width-4-6),
    (u-5\/6,      5/6,      $use-width-5-6),
    (u-1\/8,      1/8,      $use-width-1-8),
    (u-2\/8,      2/8,      $use-width-2-8),
    (u-3\/8,      3/8,      $use-width-3-8),
    (u-4\/8,      4/8,      $use-width-4-8),
    (u-5\/8,      5/8,      $use-width-5-8),
    (u-6\/8,      6/8,      $use-width-6-8),
    (u-7\/8,      7/8,      $use-width-7-8),
    (u-1\/10,     1/10,     $use-width-1-10),
    (u-2\/10,     2/10,     $use-width-2-10),
    (u-3\/10,     3/10,     $use-width-3-10),
    (u-4\/10,     4/10,     $use-width-4-10),
    (u-5\/10,     5/10,     $use-width-5-10),
    (u-6\/10,     6/10,     $use-width-6-10),
    (u-7\/10,     7/10,     $use-width-7-10),
    (u-8\/10,     8/10,     $use-width-8-10),
    (u-9\/10,     9/10,     $use-width-9-10),
    (u-1\/12,     1/12,     $use-width-1-12),
    (u-2\/12,     2/12,     $use-width-2-12),
    (u-3\/12,     3/12,     $use-width-3-12),
    (u-4\/12,     4/12,     $use-width-4-12),
    (u-5\/12,     5/12,     $use-width-5-12),
    (u-6\/12,     6/12,     $use-width-6-12),
    (u-7\/12,     7/12,     $use-width-7-12),
    (u-8\/12,     8/12,     $use-width-8-12),
    (u-9\/12,     9/12,     $use-width-9-12),
    (u-10\/12,    10/12,    $use-width-10-12),
    (u-11\/12,    11/12,    $use-width-11-12),
);
@include make-offsets(width, $width-fractions);




/*------------------------------------*\
    $PUSH
\*------------------------------------*/
/**
 * 1. The namespace. `/` char has to be escaped to be valid CSS.
 * 2. The fraction used to calculate the % offset.
 * 3. The Sass variable, if true this class will compile into your CSS.
 */
$push-fractions: (
/*  [1]         [2]       [3] */
    (u-push-1\/1,      1,        $use-push-1-1),
    (u-push-1\/2,      1/2,      $use-push-1-2),
    (u-push-1\/3,      1/3,      $use-push-1-3),
    (u-push-2\/3,      2/3,      $use-push-2-3),
    (u-push-1\/4,      1/4,      $use-push-1-4),
    (u-push-2\/4,      2/4,      $use-push-2-4),
    (u-push-3\/4,      3/4,      $use-push-3-4),
    (u-push-1\/5,      1/5,      $use-push-1-5),
    (u-push-2\/5,      2/5,      $use-push-2-5),
    (u-push-3\/5,      3/5,      $use-push-3-5),
    (u-push-4\/5,      4/5,      $use-push-4-5),
    (u-push-1\/6,      1/6,      $use-push-1-6),
    (u-push-2\/6,      2/6,      $use-push-2-6),
    (u-push-3\/6,      3/6,      $use-push-3-6),
    (u-push-4\/6,      4/6,      $use-push-4-6),
    (u-push-5\/6,      5/6,      $use-push-5-6),
    (u-push-1\/8,      1/8,      $use-push-1-8),
    (u-push-2\/8,      2/8,      $use-push-2-8),
    (u-push-3\/8,      3/8,      $use-push-3-8),
    (u-push-4\/8,      4/8,      $use-push-4-8),
    (u-push-5\/8,      5/8,      $use-push-5-8),
    (u-push-6\/8,      6/8,      $use-push-6-8),
    (u-push-7\/8,      7/8,      $use-push-7-8),
    (u-push-1\/10,     1/10,     $use-push-1-10),
    (u-push-2\/10,     2/10,     $use-push-2-10),
    (u-push-3\/10,     3/10,     $use-push-3-10),
    (u-push-4\/10,     4/10,     $use-push-4-10),
    (u-push-5\/10,     5/10,     $use-push-5-10),
    (u-push-6\/10,     6/10,     $use-push-6-10),
    (u-push-7\/10,     7/10,     $use-push-7-10),
    (u-push-8\/10,     8/10,     $use-push-8-10),
    (u-push-9\/10,     9/10,     $use-push-9-10),
    (u-push-1\/12,     1/12,     $use-push-1-12),
    (u-push-2\/12,     2/12,     $use-push-2-12),
    (u-push-3\/12,     3/12,     $use-push-3-12),
    (u-push-4\/12,     4/12,     $use-push-4-12),
    (u-push-5\/12,     5/12,     $use-push-5-12),
    (u-push-6\/12,     6/12,     $use-push-6-12),
    (u-push-7\/12,     7/12,     $use-push-7-12),
    (u-push-8\/12,     8/12,     $use-push-8-12),
    (u-push-9\/12,     9/12,     $use-push-9-12),
    (u-push-10\/12,    10/12,    $use-push-10-12),
    (u-push-11\/12,    11/12,    $use-push-11-12),
);
@include make-offsets(left, $push-fractions);





/*------------------------------------*\
    $PULL
\*------------------------------------*/
/**
 * 1. The namespace. `/` char has to be escaped to be valid CSS.
 * 2. The fraction used to calculate the % offset.
 * 3. The Sass variable, if true this class will compile into your CSS.
 */
$pull-fractions: (
/*  [1]         [2]       [3] */
    (u-pull-1\/1,      1,        $use-pull-1-1),
    (u-pull-1\/2,      1/2,      $use-pull-1-2),
    (u-pull-1\/3,      1/3,      $use-pull-1-3),
    (u-pull-2\/3,      2/3,      $use-pull-2-3),
    (u-pull-1\/4,      1/4,      $use-pull-1-4),
    (u-pull-2\/4,      2/4,      $use-pull-2-4),
    (u-pull-3\/4,      3/4,      $use-pull-3-4),
    (u-pull-1\/5,      1/5,      $use-pull-1-5),
    (u-pull-2\/5,      2/5,      $use-pull-2-5),
    (u-pull-3\/5,      3/5,      $use-pull-3-5),
    (u-pull-4\/5,      4/5,      $use-pull-4-5),
    (u-pull-1\/6,      1/6,      $use-pull-1-6),
    (u-pull-2\/6,      2/6,      $use-pull-2-6),
    (u-pull-3\/6,      3/6,      $use-pull-3-6),
    (u-pull-4\/6,      4/6,      $use-pull-4-6),
    (u-pull-5\/6,      5/6,      $use-pull-5-6),
    (u-pull-1\/8,      1/8,      $use-pull-1-8),
    (u-pull-2\/8,      2/8,      $use-pull-2-8),
    (u-pull-3\/8,      3/8,      $use-pull-3-8),
    (u-pull-4\/8,      4/8,      $use-pull-4-8),
    (u-pull-5\/8,      5/8,      $use-pull-5-8),
    (u-pull-6\/8,      6/8,      $use-pull-6-8),
    (u-pull-7\/8,      7/8,      $use-pull-7-8),
    (u-pull-1\/10,     1/10,     $use-pull-1-10),
    (u-pull-2\/10,     2/10,     $use-pull-2-10),
    (u-pull-3\/10,     3/10,     $use-pull-3-10),
    (u-pull-4\/10,     4/10,     $use-pull-4-10),
    (u-pull-5\/10,     5/10,     $use-pull-5-10),
    (u-pull-6\/10,     6/10,     $use-pull-6-10),
    (u-pull-7\/10,     7/10,     $use-pull-7-10),
    (u-pull-8\/10,     8/10,     $use-pull-8-10),
    (u-pull-9\/10,     9/10,     $use-pull-9-10),
    (u-pull-1\/12,     1/12,     $use-pull-1-12),
    (u-pull-2\/12,     2/12,     $use-pull-2-12),
    (u-pull-3\/12,     3/12,     $use-pull-3-12),
    (u-pull-4\/12,     4/12,     $use-pull-4-12),
    (u-pull-5\/12,     5/12,     $use-pull-5-12),
    (u-pull-6\/12,     6/12,     $use-pull-6-12),
    (u-pull-7\/12,     7/12,     $use-pull-7-12),
    (u-pull-8\/12,     8/12,     $use-pull-8-12),
    (u-pull-9\/12,     9/12,     $use-pull-9-12),
    (u-pull-10\/12,    10/12,    $use-pull-10-12),
    (u-pull-11\/12,    11/12,    $use-pull-11-12),
);
@include make-offsets(right, $pull-fractions);
